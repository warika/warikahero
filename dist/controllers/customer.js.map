{"version":3,"sources":["../../src/controllers/customer.js"],"names":["req","res","next","id","params","customer","body","sql","pool","query","name","address","province","officeno","mobileno","contactperson","contactno","website","location","type","remark","json","message","setImmediate","update_by_id","delete_by_id","rows","length","status","find_all","find_by_id","console","log","add_data","router","express","Router","route","get","post","delete","put","module","exports"],"mappings":"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","file":"customer.js","sourcesContent":["import express from 'express'\nimport pool from '../connection'\nvar router = express.Router()\n\nrouter.route('/')\n  .get(find_all)\n  .post(add_data)\n\nrouter.route('/:id')\n  .get(find_by_id)\n  .delete(delete_by_id)\n  .put(update_by_id)\n\nasync function update_by_id(req, res, next){\n  try {\n    let id = req.params.id\n    let customer = req.body\n    var sql = `UPDATE \"customers\" SET (name, address, province, officeno, mobileno, contactperson, contactno, website, location, type, remark)\n               = ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) WHERE id = $12`;\n     await pool.query(sql, [\n     customer.name,\n     customer.address,\n     customer.province,\n     customer.officeno,\n     customer.mobileno,\n     customer.contactperson,\n     customer.contactno,\n     customer.website,\n     customer.location,\n     customer.type,\n     customer.remark,\n     id\n   ])\n   res.json({ message: 'แก้ไขสำเร็จ' })\n } catch (err) {\n   setImmediate(() => { next(err) })\n }\n}\nasync function delete_by_id(req, res, next){\n  try {\n    let id = req.params.id\n    var sql = `DELETE FROM \"customers\" WHERE id = $1`;\n    await pool.query(sql, [ req.params.id ])\n    res.json({message: 'yes'})\n  } catch (err) {\n    setImmediate(() => { next(err) })\n  }\n}\nasync function find_all(req, res, next){\n  try {\n    var sql = `SELECT * FROM \"customers\"`;\n    const { rows } = await pool.query(sql)\n    if(rows.length == 0) return res.status(404).json({message: 'NOT FOUND!'})\n    else return res.json(rows)\n  } catch (err) {\n    setImmediate(() => { next(err) })\n  }\n}\nasync function find_by_id(req, res, next){\n  try {\n    let id = req.params.id\n    var sql = `SELECT * FROM \"customers\" WHERE id = $1`;\n    const { rows } = await pool.query(sql, [id])\n    if(rows.length == 0) return res.status(404).json({message: 'NOT FOUND!'})\n    else return res.json(rows[0])\n  } catch (err) {\n    setImmediate(() => { next(err) })\n  }\n}\nasync function add_data(req, res, next){\n  try {\n    var customer = req.body\n    console.log(customer);\n    var sql = `INSERT INTO \"customers\" (name, address, province, officeno, mobileno, contactperson, contactno, website, location, type, remark)\n              VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)`;\n    await pool.query(sql, [ customer.name, customer.address, customer.province, customer.officeno, customer.mobileno, customer.contactperson, customer.contactno, customer.website, customer.location, customer.type, customer.remark])\n    res.json({message: 'yes'})\n  } catch (err) {\n    setImmediate(() => { next(err) })\n  }\n}\n\nmodule.exports = router\n"]}